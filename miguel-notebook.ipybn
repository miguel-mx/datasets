{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First approach to Cancer and Daily Caloric Supply"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 576,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "# import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 577,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load datasets\n",
    "# country = 'GBR'\n",
    "\n",
    "url1 = 'https://raw.githubusercontent.com/miguel-mx/datasets/master/miguel/share-population-with-cancer.csv'\n",
    "url2 = 'https://raw.githubusercontent.com/miguel-mx/datasets/master/miguel/daily-caloric-supply.csv'\n",
    "\n",
    "# Share population with cancer SPWC\n",
    "spwc = pd.read_csv(url1, error_bad_lines=False)\n",
    "\n",
    "# Daily Caloric Supply DCS \n",
    "# kilocalories per person per day\n",
    "dcs = pd.read_csv(url2, error_bad_lines=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 578,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract country\n",
    "# Country code\n",
    "country_dict = {\n",
    "  \"Bangladesh\": \"BGD\",\n",
    "  \"Canada\": \"CAN\",\n",
    "  \"France\": \"FRA\",\n",
    "  \"Mexico\": \"MEX\",\n",
    "  \"Nepal\": \"NPL\",\n",
    "  \"Romania\": \"ROU\",\n",
    "  \"South Africa\": \"ZAF\",\n",
    "  \"Spain\": \"ESP\",\n",
    "  \"Sweden\": \"SWE\",\n",
    "  \"United Kingdom\": \"GBR\",\n",
    "  \"United States\": \"USA\" \n",
    "}\n",
    "\n",
    "# Country to analyze\n",
    "country_code = country_dict['Bangladesh']\n",
    "\n",
    "countryDS = dcs.loc[dcs['Code'] == country_code]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 579,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Animal-protein</th>\n",
       "      <th>Plant-protein</th>\n",
       "      <th>Fat</th>\n",
       "      <th>Carbohydrates</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1961</td>\n",
       "      <td>21.80</td>\n",
       "      <td>160.16</td>\n",
       "      <td>147.06</td>\n",
       "      <td>1824.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1962</td>\n",
       "      <td>22.56</td>\n",
       "      <td>156.84</td>\n",
       "      <td>138.60</td>\n",
       "      <td>1810.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1963</td>\n",
       "      <td>22.60</td>\n",
       "      <td>160.64</td>\n",
       "      <td>146.97</td>\n",
       "      <td>1843.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1964</td>\n",
       "      <td>23.96</td>\n",
       "      <td>159.48</td>\n",
       "      <td>145.17</td>\n",
       "      <td>1829.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1965</td>\n",
       "      <td>24.92</td>\n",
       "      <td>154.12</td>\n",
       "      <td>147.87</td>\n",
       "      <td>1795.09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Animal-protein  Plant-protein     Fat  Carbohydrates\n",
       "0  1961           21.80         160.16  147.06        1824.98\n",
       "1  1962           22.56         156.84  138.60        1810.00\n",
       "2  1963           22.60         160.64  146.97        1843.79\n",
       "3  1964           23.96         159.48  145.17        1829.39\n",
       "4  1965           24.92         154.12  147.87        1795.09"
      ]
     },
     "execution_count": 579,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove Entity and Code columns (is the same for all rows)\n",
    "# Set year as the index (maybe treat as time series)\n",
    "\n",
    "countryDS = countryDS.drop(['Entity','Code'], axis = 1)\n",
    "#countryDS.set_index(['Year'])\n",
    "countryDS.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Change Year to DateTime to work with the dataset as a TimeSeries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 580,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Prevalence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1990</td>\n",
       "      <td>0.256482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1991</td>\n",
       "      <td>0.239093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1992</td>\n",
       "      <td>0.238727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1993</td>\n",
       "      <td>0.233570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1994</td>\n",
       "      <td>0.228958</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Prevalence\n",
       "0  1990    0.256482\n",
       "1  1991    0.239093\n",
       "2  1992    0.238727\n",
       "3  1993    0.233570\n",
       "4  1994    0.228958"
      ]
     },
     "execution_count": 580,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get Cancer prevalence for GBR\n",
    "prevalence = spwc.loc[spwc['Code'] == country_code]\n",
    "prevalence = prevalence.drop(['Entity','Code'], axis = 1)\n",
    "\n",
    "prevalence.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 581,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Animal-protein</th>\n",
       "      <th>Plant-protein</th>\n",
       "      <th>Fat</th>\n",
       "      <th>Carbohydrates</th>\n",
       "      <th>Calories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1961</td>\n",
       "      <td>21.80</td>\n",
       "      <td>160.16</td>\n",
       "      <td>147.06</td>\n",
       "      <td>1824.98</td>\n",
       "      <td>2154.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1962</td>\n",
       "      <td>22.56</td>\n",
       "      <td>156.84</td>\n",
       "      <td>138.60</td>\n",
       "      <td>1810.00</td>\n",
       "      <td>2128.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1963</td>\n",
       "      <td>22.60</td>\n",
       "      <td>160.64</td>\n",
       "      <td>146.97</td>\n",
       "      <td>1843.79</td>\n",
       "      <td>2174.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1964</td>\n",
       "      <td>23.96</td>\n",
       "      <td>159.48</td>\n",
       "      <td>145.17</td>\n",
       "      <td>1829.39</td>\n",
       "      <td>2158.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1965</td>\n",
       "      <td>24.92</td>\n",
       "      <td>154.12</td>\n",
       "      <td>147.87</td>\n",
       "      <td>1795.09</td>\n",
       "      <td>2122.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Animal-protein  Plant-protein     Fat  Carbohydrates  Calories\n",
       "0  1961           21.80         160.16  147.06        1824.98    2154.0\n",
       "1  1962           22.56         156.84  138.60        1810.00    2128.0\n",
       "2  1963           22.60         160.64  146.97        1843.79    2174.0\n",
       "3  1964           23.96         159.48  145.17        1829.39    2158.0\n",
       "4  1965           24.92         154.12  147.87        1795.09    2122.0"
      ]
     },
     "execution_count": 581,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# New column total of calories \n",
    "countryDS['Calories'] = countryDS[['Animal-protein', 'Plant-protein', 'Fat', 'Carbohydrates']].sum(axis=1)\n",
    "countryDS.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## > 3000 Calories by day is not a low calorie intake"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cancer Data vs Protein intake\n",
    "\n",
    "*** Cancer ***\n",
    "From 1990 to 2017\n",
    "\n",
    "*** Protein ***\n",
    "From 1961 to 2013\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 582,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove years befor 1990\n",
    "countryDS = countryDS[(countryDS.Year >= 1990)]\n",
    "\n",
    "#Remove years after 2013\n",
    "prevalence = prevalence[(prevalence.Year <= 2013)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 583,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 24 entries, 29 to 52\n",
      "Data columns (total 6 columns):\n",
      "Year              24 non-null int64\n",
      "Animal-protein    24 non-null float64\n",
      "Plant-protein     24 non-null float64\n",
      "Fat               24 non-null float64\n",
      "Carbohydrates     24 non-null float64\n",
      "Calories          24 non-null float64\n",
      "dtypes: float64(5), int64(1)\n",
      "memory usage: 1.3 KB\n"
     ]
    }
   ],
   "source": [
    "countryDS.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 584,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 24 entries, 0 to 23\n",
      "Data columns (total 2 columns):\n",
      "Year          24 non-null int64\n",
      "Prevalence    24 non-null float64\n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 576.0 bytes\n"
     ]
    }
   ],
   "source": [
    "prevalence.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 585,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Animal-protein</th>\n",
       "      <th>Plant-protein</th>\n",
       "      <th>Fat</th>\n",
       "      <th>Carbohydrates</th>\n",
       "      <th>Calories</th>\n",
       "      <th>Prevalence</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1990-01-01</th>\n",
       "      <td>19.92</td>\n",
       "      <td>162.80</td>\n",
       "      <td>155.07</td>\n",
       "      <td>1773.21</td>\n",
       "      <td>2111.0</td>\n",
       "      <td>0.256482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1991-01-01</th>\n",
       "      <td>20.44</td>\n",
       "      <td>160.72</td>\n",
       "      <td>172.26</td>\n",
       "      <td>1762.58</td>\n",
       "      <td>2116.0</td>\n",
       "      <td>0.239093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1992-01-01</th>\n",
       "      <td>20.56</td>\n",
       "      <td>158.84</td>\n",
       "      <td>196.29</td>\n",
       "      <td>1735.31</td>\n",
       "      <td>2111.0</td>\n",
       "      <td>0.238727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1993-01-01</th>\n",
       "      <td>21.60</td>\n",
       "      <td>150.08</td>\n",
       "      <td>178.38</td>\n",
       "      <td>1659.94</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>0.233570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1994-01-01</th>\n",
       "      <td>21.48</td>\n",
       "      <td>152.36</td>\n",
       "      <td>170.73</td>\n",
       "      <td>1658.43</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>0.228958</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Animal-protein  Plant-protein     Fat  Carbohydrates  Calories  \\\n",
       "Year                                                                         \n",
       "1990-01-01           19.92         162.80  155.07        1773.21    2111.0   \n",
       "1991-01-01           20.44         160.72  172.26        1762.58    2116.0   \n",
       "1992-01-01           20.56         158.84  196.29        1735.31    2111.0   \n",
       "1993-01-01           21.60         150.08  178.38        1659.94    2010.0   \n",
       "1994-01-01           21.48         152.36  170.73        1658.43    2003.0   \n",
       "\n",
       "            Prevalence  \n",
       "Year                    \n",
       "1990-01-01    0.256482  \n",
       "1991-01-01    0.239093  \n",
       "1992-01-01    0.238727  \n",
       "1993-01-01    0.233570  \n",
       "1994-01-01    0.228958  "
      ]
     },
     "execution_count": 585,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Copy the Cancer prevalence column to Caloric DataFrame\n",
    "countryDS['Prevalence'] = prevalence['Prevalence'].values\n",
    "\n",
    "\n",
    "# Chage Data Set to time series\n",
    "countryDS.Year = pd.to_datetime(countryDS.Year, format='%Y')\n",
    "countryDS = countryDS.set_index(['Year'])\n",
    "\n",
    "countryDS.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 586,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Calories      2263.50000\n",
       "Prevalence       0.22876\n",
       "dtype: float64"
      ]
     },
     "execution_count": 586,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countryDS[['Calories', 'Prevalence']].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 587,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'cancer Prevalence')"
      ]
     },
     "execution_count": 587,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "# Use seaborn style defaults and set the default figure size\n",
    "sns.set(rc={'figure.figsize':(11, 4)})\n",
    "cols_plot = ['Calories', 'Prevalence']\n",
    "\n",
    "# fig, ax = plt.subplots()\n",
    "# ax.plot(countryDS.Calories,\n",
    "# marker='.', linestyle='-', linewidth=0.5, label='Daily Calories')\n",
    "# ax.plot(countryDS.Prevalence,\n",
    "# marker='o', markersize=8, linestyle='-', label='Cancer Prevalence')\n",
    "# ax.set_ylabel('')\n",
    "# ax.legend();\n",
    "\n",
    "axes = countryDS[cols_plot].plot(marker='.', alpha=0.5, linestyle='-', figsize=(10, 10), subplots=True)\n",
    "axes[0].set_ylabel('Daily Calories')\n",
    "axes[1].set_ylabel('cancer Prevalence')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 588,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Calories</th>\n",
       "      <th>Prevalence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Calories</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.059921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Prevalence</th>\n",
       "      <td>-0.059921</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Calories  Prevalence\n",
       "Calories    1.000000   -0.059921\n",
       "Prevalence -0.059921    1.000000"
      ]
     },
     "execution_count": 588,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Correlation between Total Calories and Cancer Prevalence \n",
    "\n",
    "countryDS[['Calories', 'Prevalence']].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Total daily calories intake vs Cancer prevalence correlation is High"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 589,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "matplotlib.style.use('ggplot')\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.scatter(countryDS.Calories, countryDS.Prevalence)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notes\n",
    "\n",
    "* I will test this code with the rest of the countries.\n",
    "\n",
    "\n",
    "* If we talk more in general about Hunger and Undernourishment. This problem affects more the developing countries and children in specific. Most of this children never grow up to be affected by cancer.\n",
    "https://ourworldindata.org/hunger-and-undernourishment#depth-of-the-food-deficit\n",
    "\n",
    "\n",
    "* Most developed countries have more cancer prevalence. ¿Life expentancy is higher? This countries don't have Hunger and Undernourishment problems.\n",
    "https://ourworldindata.org/cancer#cancer-prevalence\n",
    "\n",
    "\n",
    "* Because of the points 2 and 3, I'm not sure about the direct correlation between the Calories intake and the Cancer prevalence. The correlation could be just coincidence? \n",
    "\n",
    "\n",
    "* The set of observations is small: from 1990 to 2013\n",
    "\n",
    "\n",
    "* Looking for information about this issue I found that there are a problem with cancer patients and malnutrition. But this is a different problem.\n",
    "\n",
    "\n",
    "* If we convert the year index to datetime could we treat the dataset as a timeseries?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
